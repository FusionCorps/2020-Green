import cv2
import numpy
import math
from enum import Enum
​
class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
​
        self.__resize_image_width = 450.0
        self.__resize_image_height = 300.0
        self.__resize_image_interpolation = cv2.INTER_NEAREST
​
        self.resize_image_output = None
​
        self.__hsl_threshold_input = self.resize_image_output
        self.__hsl_threshold_hue = [19.424460431654676, 30.254668930390498]
        self.__hsl_threshold_saturation = [151.34892086330936, 255.0]
        self.__hsl_threshold_luminance = [0.0, 194.3887945670628]
​
        self.hsl_threshold_output = None
​
        self.__mask_input = self.resize_image_output
        self.__mask_mask = self.hsl_threshold_output
​
        self.mask_output = None
​
        self.__find_blobs_input = self.mask_output
        self.__find_blobs_min_area = 677.0
        self.__find_blobs_circularity = [0.46762589928057563, 1.0]
        self.__find_blobs_dark_blobs = False
​
        self.find_blobs_output = None
​
​
    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(self.__resize_image_input, self.__resize_image_width, self.__resize_image_height, self.__resize_image_interpolation)
​
        # Step HSL_Threshold0:
        self.__hsl_threshold_input = self.resize_image_output
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)
​
        # Step Mask0:
        self.__mask_input = self.resize_image_output
        self.__mask_mask = self.hsl_threshold_output
        (self.mask_output) = self.__mask(self.__mask_input, self.__mask_mask)
​
        # Step Find_Blobs0:
        self.__find_blobs_input = self.mask_output
        (self.find_blobs_output) = self.__find_blobs(self.__find_blobs_input, self.__find_blobs_min_area, self.__find_blobs_circularity, self.__find_blobs_dark_blobs)
​
​
    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)
​
    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))
​
    @staticmethod
    def __mask(input, mask):
        """Filter out an area of an image using a binary mask.
        Args:
            input: A three channel numpy.ndarray.
            mask: A black and white numpy.ndarray.
        Returns:
            A three channel numpy.ndarray.
        """
        return cv2.bitwise_and(input, input, mask=mask)
​
    @staticmethod
    def __find_blobs(input, min_area, circularity, dark_blobs):
        """Detects groups of pixels in an image.
        Args:
            input: A numpy.ndarray.
            min_area: The minimum blob size to be found.
            circularity: The min and max circularity as a list of two numbers.
            dark_blobs: A boolean. If true looks for black. Otherwise it looks for white.
        Returns:
            A list of KeyPoint.
        """
        params = cv2.SimpleBlobDetector_Params()
        params.filterByColor = 1
        params.blobColor = (0 if dark_blobs else 255)
        params.minThreshold = 10
        params.maxThreshold = 220
        params.filterByArea = True
        params.minArea = min_area
        params.filterByCircularity = True
        params.minCircularity = circularity[0]
        params.maxCircularity = circularity[1]
        params.filterByConvexity = False
        params.filterByInertia = False
        detector = cv2.SimpleBlobDetector_create(params)
        return detector.detect(input)

